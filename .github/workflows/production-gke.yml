name: Production GKE Deployment

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Install Jest
      run: npm install --save-dev jest

    - name: Update test script
      run: |
        sed -i 's/"test": "echo \\"Error: no test specified\\" && exit 1"/"test": "jest"/' package.json

    - name: Run tests
      run: npm test

  build-and-deploy-gke:
    needs: test
    runs-on: ubuntu-latest
    environment: production-gke

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Configure Docker to use gcloud as credential helper
      run: gcloud auth configure-docker

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:prod-v${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
          --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}

    - name: Update Kubernetes deployment manifests
      run: |
        # Replace placeholder with actual Docker Hub username in deployment.yaml
        sed -i "s/DOCKERHUB_USERNAME/${{ secrets.DOCKERHUB_USERNAME }}/g" k8s/deployment.yaml
        
        # Update image tag to latest production version
        sed -i "s/:latest/:prod-v${{ github.run_number }}/g" k8s/deployment.yaml

    - name: Apply Kubernetes manifests
      run: |
        echo "🚀 Deploying to GKE Production..."
        
        # Apply all Kubernetes manifests in order
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment rollout
      run: |
        echo "⏳ Waiting for deployment to complete..."
        kubectl rollout status deployment/job-portal-deployment -n job-portal --timeout=600s

    - name: Verify deployment
      run: |
        echo "✅ Verifying deployment health..."
        
        # Check if pods are running
        kubectl get pods -n job-portal -l app=job-portal
        
        # Check deployment status
        kubectl get deployment job-portal-deployment -n job-portal
        
        # Check service
        kubectl get service job-portal-service -n job-portal

    - name: Get deployment information
      run: |
        echo "📊 Production GKE Deployment Information:"
        echo "========================================="
        
        echo "🏷️  Image deployed: ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:prod-v${{ github.run_number }}"
        
        echo ""
        echo "📦 Pods Status:"
        kubectl get pods -n job-portal -o wide
        
        echo ""
        echo "🌐 Services:"
        kubectl get services -n job-portal
        
        echo ""
        echo "🔗 Ingress:"
        kubectl get ingress -n job-portal
        
        echo ""
        echo "📈 Deployment Details:"
        kubectl describe deployment job-portal-deployment -n job-portal | head -20

    - name: Get external access information
      run: |
        echo "🌍 External Access Information:"
        echo "==============================="
        
        # Try to get external IP from ingress
        EXTERNAL_IP=$(kubectl get ingress job-portal-ingress -n job-portal -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
        
        if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
          echo "✅ External IP: $EXTERNAL_IP"
          echo "🔗 API URL: http://$EXTERNAL_IP"
          echo "📚 API Documentation: http://$EXTERNAL_IP/api-docs"
          echo "❤️  Health Check: http://$EXTERNAL_IP/"
        else
          echo "⏳ External IP not yet assigned. This is normal for new deployments."
          echo "🔍 Check ingress status in a few minutes:"
          echo "   kubectl get ingress job-portal-ingress -n job-portal"
        fi
        
        echo ""
        echo "🎯 Alternative access via port-forward (for testing):"
        echo "   kubectl port-forward service/job-portal-service 8080:80 -n job-portal"
        echo "   Then access: http://localhost:8080"

    - name: Deployment success notification
      run: |
        echo "🎉 Production GKE Deployment Completed Successfully!"
        echo "=================================================="
        echo "✅ Tests passed"
        echo "✅ Docker image built and pushed"
        echo "✅ Kubernetes manifests applied"
        echo "✅ Deployment rolled out successfully"
        echo "✅ Health checks passed"
        echo ""
        echo "🚀 Your Job Portal API is now live on GKE!"