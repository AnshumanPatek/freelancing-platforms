name: Staging Deployment

on:
  push:
    branches: [ develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Install Jest
      run: npm install --save-dev jest

    - name: Update test script
      run: |
        sed -i 's/"test": "echo \\"Error: no test specified\\" && exit 1"/"test": "jest"/' package.json

    - name: Run tests
      run: npm test

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker image (staging)
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:staging
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USERNAME }}
        key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
        script: |
          # Create directory if it doesn't exist
          mkdir -p ~/job-portal-staging
          cd ~/job-portal-staging
          
          # Pull the latest staging image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:staging
          
          # Stop any running staging container
          docker stop job-portal-staging-container || true
          docker rm job-portal-staging-container || true
          
          # Run the new staging container
          docker run -d --name job-portal-staging-container -p 3001:5000 \
            -e MONGODB_URI="${{ secrets.STAGING_MONGODB_URI }}" \
            -e JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
            -e PORT=5000 \
            -e NODE_ENV=staging \
            ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:staging

    - name: Staging deployment notification
      run: |
        echo "ðŸš€ Staging deployment completed successfully!"
        echo "Staging URL: http://${{ secrets.STAGING_SERVER_HOST }}:3001"
        echo "API Documentation: http://${{ secrets.STAGING_SERVER_HOST }}:3001/api-docs"