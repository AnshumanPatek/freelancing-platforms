name: Staging Docker Deployment

on:
  push:
    branches: [ stage ]
  pull_request:
    branches: [ stage]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Install Jest
      run: npm install --save-dev jest

    - name: Update test script
      run: |
        sed -i 's/"test": "echo \\"Error: no test specified\\" && exit 1"/"test": "jest"/' package.json

    - name: Run tests
      run: npm test

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker image (staging)
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:staging
        
    - name: Deploy to staging server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USERNAME }}
        key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
        script: |
          # Create directory if it doesn't exist
          mkdir -p ~/job-portal-staging
          cd ~/job-portal-staging
          
          # Pull the latest staging image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:staging
          
          # Stop any running staging container
          docker stop job-portal-staging-container || true
          docker rm job-portal-staging-container || true
          
          # Clean up old images to save space
          docker image prune -f
          
          # Run the new staging container with health check
          docker run -d --name job-portal-staging-container \
            -p 3001:5000 \
            --restart unless-stopped \
            --health-cmd="curl -f http://localhost:5000/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            -e MONGODB_URI="${{ secrets.STAGING_MONGODB_URI }}" \
            -e JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
            -e PORT=5000 \
            -e NODE_ENV=staging \
            ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:staging
          
          # Wait a moment for container to start
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q job-portal-staging-container; then
            echo "✅ Staging container is running successfully"
            docker ps | grep job-portal-staging-container
          else
            echo "❌ Staging container failed to start"
            docker logs job-portal-staging-container
            exit 1
          fi

    - name: Verify staging deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_SERVER_HOST }}
        username: ${{ secrets.STAGING_SERVER_USERNAME }}
        key: ${{ secrets.STAGING_SERVER_SSH_KEY }}
        script: |
          # Test the staging API
          echo "🧪 Testing staging API..."
          
          # Wait for the service to be fully ready
          sleep 5
          
          # Test health endpoint
          if curl -f http://localhost:3001/ > /dev/null 2>&1; then
            echo "✅ Staging API health check passed"
          else
            echo "❌ Staging API health check failed"
            docker logs job-portal-staging-container --tail 20
            exit 1
          fi
          
          # Test API documentation endpoint
          if curl -f http://localhost:3001/api-docs > /dev/null 2>&1; then
            echo "✅ Staging API documentation is accessible"
          else
            echo "⚠️  API documentation endpoint not accessible (this might be normal)"
          fi

    - name: Staging deployment notification
      run: |
        echo "🎉 Staging Deployment Completed Successfully!"
        echo "==========================================="
        echo "✅ Tests passed"
        echo "✅ Docker image built and pushed"
        echo "✅ Staging server deployment successful"
        echo "✅ Health checks passed"
        echo ""
        echo "🌐 Staging Environment Access:"
        echo "   URL: http://${{ secrets.STAGING_SERVER_HOST }}:3001"
        echo "   API Documentation: http://${{ secrets.STAGING_SERVER_HOST }}:3001/api-docs"
        echo "   Health Check: http://${{ secrets.STAGING_SERVER_HOST }}:3001/"
        echo ""
        echo "🧪 Ready for testing before production deployment!"