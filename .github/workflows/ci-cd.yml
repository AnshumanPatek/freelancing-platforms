name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Install Jest
      run: npm install --save-dev jest

    - name: Update test script
      run: |
        sed -i 's/"test": "echo \\"Error: no test specified\\" && exit 1"/"test": "jest"/' package.json

    - name: Run tests
      run: npm test
      
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:latest
        
    # Add deployment steps based on your cloud provider
    # Example for deploying to a server using SSH
    - name: Deploy to server
      if: github.event_name != 'pull_request'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Create directory if it doesn't exist
          mkdir -p ~/job-portal
          cd ~/job-portal
          
          # Pull the latest image
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:latest
          
          # Stop any running container with the same name
          docker stop job-portal-container || true
          docker rm job-portal-container || true
          
          # Run the new container
          docker run -d \
            --name job-portal-container \
            -p 8080:8080 \
            -e MONGODB_URI=${{ secrets.MONGODB_URI || 'mongodb://host.docker.internal:27017/job-portal' }} \
            -e JWT_SECRET=${{ secrets.JWT_SECRET || 'your_jwt_secret_key' }} \
            -e PORT=8080 \
            ${{ secrets.DOCKERHUB_USERNAME }}/job-portal:latest 